import type { VitePagesPluginOptions } from './types';
import { isTypescript } from './utilities/isTypescript';

export class Builders {
	public readonly file = (
		router: string,
		routes: string[],
		redirects: string[],
		imports: string[],
		useLazy: boolean,
		options: VitePagesPluginOptions,
		virtual: boolean = false
	): string => {
		const isTs = isTypescript(options.root);

		return `
// @ts-nocheck
// eslint-disable 
// prettier-ignore

// Generated by Vite Router
// https://www.npmjs.com/package/@bracketed/vite-plugin-router
// https://github.com/bracketed/vite-router

${virtual === false ? (isTs ? "import type { VitePagesPluginProps } from '@bracketed/vite-plugin-router/types';" : '') : ''}
${useLazy || options.suspense ? `import { ${useLazy ? 'lazy, Suspense' : 'Suspense'} } from 'react';` : ''}
import { ${router}, Route, Routes } from 'react-router-dom';
${redirects.length > 0 ? "import { Redirect } from '@bracketed/vite-plugin-router';" : ''}

${imports.length ? imports.join('\n') : ''}

/**
 * Generated by Vite Router
 *
 * @link https://www.npmjs.com/package/@bracketed/vite-plugin-router
 * @link https://github.com/bracketed/vite-router
 */
export function AppRoutes(props${virtual === false ? (isTs ? ': VitePagesPluginProps' : '') : ''}) {
  return (
    <${router}>
      ${options.suspense === false ? '' : '<Suspense fallback={props.loadingPage || <div>Loading...</div>}>'}
        <Routes>
${routes.map((r) => '          ' + r).join('\n')}
${redirects.map((r) => '          ' + r).join('\n')}
        </Routes>
      ${options.suspense === false ? '' : '</Suspense>'} 
    </${router}>
  );
}
`.trim();
	};

	private readonly format = (value: unknown) => {
		if (typeof value === 'string') {
			if (value.startsWith('"')) return value;
			if (value.startsWith('<')) return value;

			return `"${value}"`;
		}

		return value;
	};

	public readonly component = (
		name: string,
		properties: Record<string, string | boolean | number | undefined> = {}
	): string => {
		const props = Object.entries(properties)
			.filter(([, value]) => value !== undefined)
			.map(([key, value]) => `${key}={${this.format(value)}}`)
			.join(' ');

		return `<${name}${props ? ` ${props}` : ''} />`;
	};

	public readonly lazyImport = (name: string, path: string): string =>
		`const ${name} = lazy(() => import('${path}'));`;

	public readonly defaultImport = (name: string, path: string): string => `import ${name} from '${path}';`;
}
